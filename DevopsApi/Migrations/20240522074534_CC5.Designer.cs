// <auto-generated />
using System;
using DevopsApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevopsApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240522074534_CC5")]
    partial class CC5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CCapi.Models.CodingChallenge.CC_Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AwayGoals")
                        .HasColumnType("bit");

                    b.Property<int>("BetMakerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("HomeGoals")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<bool>("Risk")
                        .HasColumnType("bit");

                    b.Property<bool>("Shootout")
                        .HasColumnType("bit");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("Winner")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BetMakerId");

                    b.HasIndex("MatchId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("CCapi.Models.CodingChallenge.CC_Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AwayGoals")
                        .HasColumnType("bit");

                    b.Property<int?>("CC_TeamId")
                        .HasColumnType("int");

                    b.Property<int>("HomeGoals")
                        .HasColumnType("int");

                    b.Property<DateTime>("Planned")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Playoff")
                        .HasColumnType("bit");

                    b.Property<bool>("Shootout")
                        .HasColumnType("bit");

                    b.Property<bool>("Winner")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CC_TeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("CCapi.Models.CodingChallenge.CC_Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Avatar")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("HomeId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<bool>("StillInGame")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HomeId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CCapi.Models.CodingChallenge.CC_User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<string>("Avatar")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Stake")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_AdminVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActualVersion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PAT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdminVersion");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_DeskProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mnemonic")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.ToTable("DeskProperties");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Holidays", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Date");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerpetratorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PerpetratorId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_OfficeAreaHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExcludedDesks")
                        .HasColumnType("int");

                    b.Property<int>("FixDesks")
                        .HasColumnType("int");

                    b.Property<int>("OfficeAreaId")
                        .HasColumnType("int");

                    b.Property<int>("ReservedDesks")
                        .HasColumnType("int");

                    b.Property<int>("TotalDesks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfficeAreaId");

                    b.ToTable("OfficeAreaHistory");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_OfficeAreas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Columns")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("ViewTemplate")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("OfficeAreas");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Offices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_OutOfOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfficeAreaId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfficeAreaId");

                    b.ToTable("OutOfOrder");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Reservations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("HolderId")
                        .HasColumnType("int");

                    b.Property<string>("Reservater")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HolderId");

                    b.HasIndex("SeatId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Seats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Bookable")
                        .HasColumnType("bit");

                    b.Property<int?>("DeskPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FixOwner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FixReservedFrom")
                        .HasColumnType("datetime2");

                    b.Property<string>("Map")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficeAreaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeskPropertyId");

                    b.HasIndex("OfficeAreaId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_SuperUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SuperUsers");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TeamLeader")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Team2OfficeArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OfficeAreaId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfficeAreaId");

                    b.HasIndex("TeamId");

                    b.ToTable("OfficeAreaList");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Joined")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Left")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxActiveReservations")
                        .HasColumnType("int");

                    b.Property<int>("MaxHomeOfficePerMonth")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Protected")
                        .HasColumnType("bit");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("WorkingHoursPerWeek")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CCapi.Models.CodingChallenge.CC_Bet", b =>
                {
                    b.HasOne("CCapi.Models.CodingChallenge.CC_User", "BetMaker")
                        .WithMany("Bets")
                        .HasForeignKey("BetMakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CCapi.Models.CodingChallenge.CC_Match", "Match")
                        .WithMany("Bets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BetMaker");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("CCapi.Models.CodingChallenge.CC_Match", b =>
                {
                    b.HasOne("CCapi.Models.CodingChallenge.CC_Team", null)
                        .WithMany("Matches")
                        .HasForeignKey("CC_TeamId");
                });

            modelBuilder.Entity("CCapi.Models.CodingChallenge.CC_Team", b =>
                {
                    b.HasOne("CCapi.Models.CodingChallenge.CC_Team", "Home")
                        .WithMany()
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Home");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Logs", b =>
                {
                    b.HasOne("DevopsApi.Models.SharedDesk.SD_Users", "Perpetrator")
                        .WithMany()
                        .HasForeignKey("PerpetratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perpetrator");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_OfficeAreaHistory", b =>
                {
                    b.HasOne("DevopsApi.Models.SharedDesk.SD_OfficeAreas", "OfficeArea")
                        .WithMany()
                        .HasForeignKey("OfficeAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfficeArea");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_OfficeAreas", b =>
                {
                    b.HasOne("DevopsApi.Models.SharedDesk.SD_Offices", "Office")
                        .WithMany("Areas")
                        .HasForeignKey("OfficeId");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_OutOfOrder", b =>
                {
                    b.HasOne("DevopsApi.Models.SharedDesk.SD_OfficeAreas", "OfficeArea")
                        .WithMany()
                        .HasForeignKey("OfficeAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfficeArea");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Reservations", b =>
                {
                    b.HasOne("DevopsApi.Models.SharedDesk.SD_Users", "Holder")
                        .WithMany("Reservations")
                        .HasForeignKey("HolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevopsApi.Models.SharedDesk.SD_Seats", "Seat")
                        .WithMany("Reservations")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Holder");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Seats", b =>
                {
                    b.HasOne("DevopsApi.Models.SharedDesk.SD_DeskProperties", "DeskProperty")
                        .WithMany("Desks")
                        .HasForeignKey("DeskPropertyId");

                    b.HasOne("DevopsApi.Models.SharedDesk.SD_OfficeAreas", "OfficeArea")
                        .WithMany("Seats")
                        .HasForeignKey("OfficeAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeskProperty");

                    b.Navigation("OfficeArea");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_SuperUsers", b =>
                {
                    b.HasOne("DevopsApi.Models.SharedDesk.SD_Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Team2OfficeArea", b =>
                {
                    b.HasOne("DevopsApi.Models.SharedDesk.SD_OfficeAreas", "OfficeArea")
                        .WithMany("Teams")
                        .HasForeignKey("OfficeAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevopsApi.Models.SharedDesk.SD_Team", "Team")
                        .WithMany("OfficeAreas")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfficeArea");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Users", b =>
                {
                    b.HasOne("DevopsApi.Models.SharedDesk.SD_Offices", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityId");

                    b.HasOne("DevopsApi.Models.SharedDesk.SD_Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CCapi.Models.CodingChallenge.CC_Match", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("CCapi.Models.CodingChallenge.CC_Team", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("CCapi.Models.CodingChallenge.CC_User", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_DeskProperties", b =>
                {
                    b.Navigation("Desks");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_OfficeAreas", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Offices", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Seats", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Team", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("OfficeAreas");
                });

            modelBuilder.Entity("DevopsApi.Models.SharedDesk.SD_Users", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
